name: ci
on:
  pull_request: {}
  push:
    branches:
      - master
env:
  CARGO_TERM_COLOR: always
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup Cache
        uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      - name: Build
        run: make

  build-release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup Cache
        uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-release-${{ hashFiles('**/Cargo.lock') }}
      - name: Build Release
        run: make build-release
      - uses: GoogleCloudPlatform/github-actions/setup-gcloud@master
        with:
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          export_default_credentials: true
      - name: Create and upload artifact tarball
        shell: bash
        run: |
            cp src/ffi/ffi.h .
            cp target/release/libcri.a .

            VERSION=$(
              git describe --tags --exact-match 2>/dev/null ||
              git rev-parse --short HEAD
            )
            TARBALL=lib-$VERSION.tar.gz

            tar cfz $TARBALL ffi.h libcri.a
            gsutil -m cp -n $TARBALL gs://$GCS_BUCKET/lib || true
        env:
          GCS_BUCKET: k8s-conform-cri-o
      - uses: actions/upload-artifact@v2
        with:
          name: lib
          path: lib-*.tar.gz

  build-static:
    runs-on: ubuntu-latest
    steps:
      - name: Install Podman
        run: |
          . /etc/os-release
          echo "deb https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/xUbuntu_${VERSION_ID}/ /" | sudo tee /etc/apt/sources.list.d/devel:kubic:libcontainers:stable.list
          curl -L https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/xUbuntu_${VERSION_ID}/Release.key | sudo apt-key add -
          sudo apt-get update
          sudo apt-get -y upgrade
          sudo apt-get -y install podman
          mkdir -p ~/.cargo/git
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup Cache
        uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-release-static-${{ hashFiles('**/Cargo.lock') }}
      - name: Build Release Static
        run: make build-release-static
      - uses: actions/upload-artifact@v2
        with:
          name: criserver
          path: target/x86_64-unknown-linux-musl/release/criserver

  doc:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup Cache
        uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      - name: Documentation
        run: make doc

  lint-clippy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup Cache
        uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      - name: Clippy Lint
        run: make lint-clippy

  lint-rustfmt:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Rustfmt
        run: make lint-rustfmt

  test-coverage:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Select nightly Toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          override: true
      - name: Install rustfmt
        shell: bash
        run: rustup component add rustfmt
      - name: Unit tests
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --lib --no-fail-fast
        env:
          CARGO_INCREMENTAL: '0'
          RUSTFLAGS: '-Zprofile -Ccodegen-units=1 -Cinline-threshold=0 -Clink-dead-code -Coverflow-checks=off -Zpanic_abort_tests'
          RUSTDOCFLAGS: '-Zprofile -Ccodegen-units=1 -Cinline-threshold=0 -Clink-dead-code -Coverflow-checks=off -Zpanic_abort_tests'
      - name: Coverage
        uses: actions-rs/grcov@v0.1
      - name: Upload Results
        uses: codecov/codecov-action@v1

  test-unit:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup Cache
        uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      - name: Unit Tests
        run: make test-unit

  test-integration:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Install CNI plugins
        shell: bash
        run: |
          curl -sfL -o - https://github.com/containernetworking/plugins/releases/download/$VERSION/cni-plugins-linux-amd64-$VERSION.tgz |
            sudo tar xfz - -C /usr/local/bin
          bridge
        env:
          VERSION: v0.8.7
      - name: Setup Cache
        uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      - name: Integration Tests
        run: |
          # Run all integration tests
          sudo env "PATH=$PATH" make test-integration

          # Fix permissions
          sudo chown -R $(id -u):$(id -g) ~/.cargo target
        env:
          RUST_TEST_THREADS: '1'

  test-e2e:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup Cache
        uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      - name: End-to-End Tests
        run: make test-e2e
